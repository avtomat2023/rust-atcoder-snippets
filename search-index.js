var searchIndex={};
searchIndex["atcoder_snippets"] = {"doc":"Utility snippets for fighting AtCoder.","i":[[0,"read","atcoder_snippets","Macros and functions for reading problem input.",null,null],[3,"Chars","atcoder_snippets::read","Reads a string as `Vec<char>`.",null,null],[3,"Bytes","","Reads a string as `Vec<u8>`",null,null],[3,"u8_","","Converts 1-origin integer into 0-origin when read from…",null,null],[3,"u16_","","Converts 1-origin integer into 0-origin when read from…",null,null],[3,"u32_","","Converts 1-origin integer into 0-origin when read from…",null,null],[3,"u64_","","Converts 1-origin integer into 0-origin when read from…",null,null],[3,"usize_","","Converts 1-origin integer into 0-origin when read from…",null,null],[3,"ReadLines","","Iterator created by `read_lines` function.",null,null],[3,"ReadChunks","","Iterator created by `read_chunks` function.",null,null],[5,"read_words_into_vec","","",null,[[["str"]],[["result",["vec","string"]],["string"],["vec"]]]],[5,"split_into_words_for_collection","","",null,[[["str"],["usize"]],[["string"],["vec",["str"]],["result",["vec","string"]]]]],[5,"read","","Returns `Readable`s read from a line of stdin.",null,[[]]],[5,"read_chunk","","Reads multiple lines from stdin.",null,[[]]],[5,"read_lines","","Creates an iterator reading stdin line by line.",null,[[],[["readlines"],["readablefromline"]]]],[5,"read_chunks","","Creates an iterator reading stdin chunk by chunk.",null,[[],[["readchunks"],["readablefromchunk"]]]],[8,"Readable","","Readable from a constant number of words.",null,null],[16,"Output","","Output type.",0,null],[18,"WORD_COUNT","","Returns how many words are read.",0,null],[10,"read_words","","Converts words into `Output`s.",0,[[],[["string"],["result",["string"]]]]],[8,"ReadableFromLine","","Readable by `read` function/macro.",null,null],[16,"Output","","",1,null],[10,"read_line","","",1,[[["str"]],[["result",["string"]],["string"]]]],[8,"ReadableFromChunk","","Readable by `read_chunk` function/macro.",null,null],[16,"Output","","",2,null],[10,"lines_count","","",2,[[],["usize"]]],[10,"read_chunk","","",2,[[],[["string"],["result",["string"]]]]],[8,"Words","","`Readable`を読み出すことができる型。",null,null],[10,"read","","",3,[[["self"]]]],[0,"write","atcoder_snippets","Output to stdout.",null,null],[5,"with_stdout","atcoder_snippets::write","Make tons of output to stdout much faster.",null,[[["fnonce"]]]],[0,"num","atcoder_snippets","Numeric types and traits.",null,null],[8,"WithZero","atcoder_snippets::num","Having identity element for addition.",null,null],[10,"zero","","",4,[[],["self"]]],[8,"WithOne","","Having identity element for multiplication.",null,null],[10,"one","","",5,[[],["self"]]],[8,"Integer","","Equipped with basic integer operations.",null,null],[8,"ToSigned","","Convertible to the signed type.",null,null],[16,"Signed","","Signed counterpart of the implementing type.",6,null],[10,"to_signed","","Converts to signed type.",6,[[["self"]],["option"]]],[11,"to_signed_unchecked","","Converts to signed type without bound check.",6,[[["self"]]]],[8,"ToUnsigned","","Convertible to the unsgined type.",null,null],[16,"Unsigned","","Unsigned counterpart of the implementing type.",7,null],[10,"to_unsigned","","Converts to unsigned type.",7,[[["self"]],["option"]]],[11,"to_unsigned_unchecked","","Converts to unsigned type without bound check.",7,[[["self"]]]],[8,"PrimitiveInteger","","Enriches signed and unsigned integer types.",null,null],[10,"abs_diff","","Calculate absolute value of a - b.",8,[[],["self"]]],[8,"PrimitiveUnsigned","","Enriches unsigned integer types.",null,null],[10,"ceil_div","","Division with ceiling.",9,[[],["self"]]],[10,"round_div","","Division with rounding off.",9,[[],["self"]]],[10,"log2","","Returns maximum `x` such that `2.pow(x) <= self`.",9,[[],["option"]]],[10,"ceil_log2","","Returns minimum `x` such that `2.pow(x) >= self`.",9,[[],["option"]]],[10,"sqrt","","Returns maximum `x` such that `x*x <= self`.",9,[[],["self"]]],[11,"gcd","","Greatest common divisor.",9,[[],["self"]]],[0,"cmp","atcoder_snippets","Comparation and sorting.",null,null],[3,"Reverse","atcoder_snippets::cmp","For reversed ordering.",null,null],[12,"0","","",10,null],[3,"Total","","Forcibly makes `PartialOrd` into `Ord`, typically for…",null,null],[12,"0","","",11,null],[4,"MaybeNegInf","","Negative infinite or finite value.",null,null],[13,"Inf","","",12,null],[13,"Fin","","",12,null],[4,"MaybeInf","","Positive infinite or finite value.",null,null],[13,"Fin","","",13,null],[13,"Inf","","",13,null],[5,"minmax","","Gets `(min, max)`.",null,[[["ord"]]]],[6,"Max","","Alias of `MaybeNegInf`.",null,null],[6,"Min","","Alias of `MaybeInf`.",null,null],[8,"SortDesc","","",null,null],[10,"sort_desc","","",14,[[["self"]]]],[10,"sort_desc_by","","",14,[[["self"],["f"]]]],[10,"sort_desc_by_key","","",14,[[["fnmut"],["self"]]]],[10,"sort_unstable_desc","","",14,[[["self"]]]],[10,"sort_unstable_desc_by","","",14,[[["self"],["f"]]]],[10,"sort_unstable_desc_by_key","","",14,[[["fnmut"],["self"]]]],[8,"IteratorMinmax","","Enriches iterators by adding `minmax` method.",null,null],[10,"minmax","","Gets `(min, max)`.",15,[[],["option"]]],[10,"minmax_by_key","","Gets `(min, max)` compared by `key_fn`.",15,[[["f"]],["option"]]],[10,"minmax_by","","Gets `(min, max)` compared by `compare`.",15,[[["f"]],["option"]]],[8,"WithCmpIdentity","","Monoid over selection of optimal value, providing…",null,null],[10,"new","","",16,[[["t"]],["self"]]],[10,"inf","","",16,[[],["self"]]],[10,"as_option","","",16,[[["self"]],[["t"],["option"]]]],[10,"as_option_mut","","",16,[[["self"]],[["option"],["t"]]]],[10,"into_option","","",16,[[],["option"]]],[11,"is_fin","","",16,[[["self"]],["bool"]]],[11,"is_inf","","",16,[[["self"]],["bool"]]],[11,"expect_fin","","",16,[[["str"]],["t"]]],[11,"fin","","",16,[[],["t"]]],[11,"fin_or","","",16,[[["t"]],["t"]]],[11,"fin_or_else","","",16,[[["fnonce"]],["t"]]],[11,"map_or","","",16,[[["u"],["fnonce"]],["u"]]],[11,"map_or_else","","",16,[[["d"],["f"]],["u"]]],[11,"map","","",12,[[["fnonce"]],[["ord"],["maybeneginf"]]]],[11,"map","","",13,[[["fnonce"]],[["maybeinf"],["ord"]]]],[0,"option","atcoder_snippets","Enriches `bool` and `Option`.",null,null],[8,"BoolExt","atcoder_snippets::option","",null,null],[10,"then","","Gets `Some(value)` if `self` is true, otherwise `None`.",17,[[["t"]],["option"]]],[10,"then_with","","Gets `Some(f())` if `self` is true, otherwise `None`.",17,[[["f"]],["option"]]],[10,"and","","Gets `option` if `self` is true, otherwise `None`.",17,[[["option"]],["option"]]],[10,"and_then","","Gets `f()` if `self` is true, otherwise `None`.",17,[[["f"]],["option"]]],[8,"OptionExt","","",null,null],[10,"to_string_or","","Convert to string or get default.",18,[[["display"],["self"]],["string"]]],[8,"Guard","","Enrich all types by adding `guard` method",null,null],[10,"guard","","`Some(self)` if `pred(&self)` holds, otherwise `None`.",19,[[],["option"]]],[0,"range","atcoder_snippets","Enriches ranges",null,null],[8,"UsizeRangeBoundsExt","atcoder_snippets::range","",null,null],[10,"to_range","","Gets a range on a sequential collection.",20,[[["self"],["usize"]],[["option",["range"]],["range",["usize"]]]]],[8,"BoundCloned","","",null,null],[10,"cloned","","",21,[[],["bound"]]],[8,"BoundExt","","",null,null],[10,"map","","",22,[[],["bound"]]],[0,"iter","atcoder_snippets","Enriches iterators.",null,null],[3,"Chunks","atcoder_snippets::iter","An iterator created by `chunks` method on iterators.",null,null],[3,"LScan","","An iterator created by `lscan` method on iterators.",null,null],[3,"GroupBy","","An iterator created by `group_by` method on iterators.",null,null],[3,"RunLength","","An iterator created by `run_length` method on iterators.",null,null],[3,"Unfold","","An iterator created by `unfold` function.",null,null],[3,"Iterate","","An iterator created by `iterate` function.",null,null],[3,"IterateMap","","An iterator created by `iterate_map` function.",null,null],[5,"unfold","","Returns an iterator applying a function creating a value…",null,[[["state"],["f"]],["unfold"]]],[5,"iterate","","Returns an iterator yielding `init`, `f(init)`,…",null,[[["t"],["f"]],["iterate"]]],[5,"iterate_map","","Returns an iterator applying a function creating a value…",null,[[["state"],["f"]],["iteratemap"]]],[8,"IteratorExt","","Enriches iterators by adding various methods.",null,null],[11,"chunks","","Returns an iterator yielding chunks.",23,[[["usize"]],["chunks"]]],[11,"lscan","","Returns an iterator folding the inner iterator and…",23,[[["s"],["f"]],["lscan"]]],[11,"lscan1","","`lscan` using the first item as initial state.",23,[[["f"]],[["lscan"],["option",["lscan"]]]]],[11,"get_unique","","If the iterator has any item and all the items are same,…",23,[[],["option"]]],[11,"group_by","","`f`によってグループ分けされた`Vec`を生成するイテレータを返す",23,[[["fnmut"]],[["groupby"],["eq"],["fnmut"]]]],[11,"run_length","","Returns an iterator yielding groups of same values as…",23,[[],["runlength"]]],[11,"join","","Concatenates items into a string with interleaving…",23,[[["display"]],["string"]]],[11,"cat","","Concatenates items into a string.",23,[[],["string"]]],[8,"IteratorInnerProduct","","Enriches exact-sized iterators by adding `inner_product`…",null,null],[11,"inner_product","","Calculate inner product of two iterators.",24,[[["i"]],["option"]]],[0,"slice","atcoder_snippets","Enriches slices.",null,null],[3,"SliceGroupBy","atcoder_snippets::slice","An iterator created by `group_by` method on slices.",null,null],[3,"SplitByGap","","An iterator created by `split_by_gap` method on slices.",null,null],[3,"Permutations","","An iterator created by `permutations` method on slices.",null,null],[8,"SliceExt","","Enriches slices by adding various methods.",null,null],[10,"fill","","Fills the slice by `val`.",25,[[["self"],["t"]]]],[10,"span","","Takes the prefix slice satisfying the predicate, and makes…",25,[[["fn"],["self"]]]],[10,"group_by","","Returns an iterator yielding groups.",25,[[["fn"],["self"]],[["fn"],["eq"],["slicegroupby"]]]],[10,"split_by_gap","","Returns an iterator yielding subslices separated by…",25,[[["self"],["fn"]],[["fn"],["splitbygap"]]]],[10,"permutations","","Returns an iterator yielding all permutations of the slice.",25,[[["self"]],["permutations"]]],[10,"count_inversions","","Counts the number of pairs of indices `(i, j)` satisfing…",25,[[["self"]],["usize"]]],[8,"SliceOfVecsExt","","Enriches slices of `Vec`s by adding various methods.",null,null],[10,"transpose_clone","","Converts `[Vec<T>]` into `Vec<Vec<T>>` permuting its X and…",26,[[["self"]],[["option",["vec"]],["vec",["vec"]]]]],[0,"collections","atcoder_snippets","Data structures.",null,null],[0,"list","atcoder_snippets::collections","Functional list.",null,null],[3,"List","atcoder_snippets::collections::list","Immutable and persistent list heavily used in functional…",null,null],[3,"ListIter","","An iterator over the items of a `List`.",null,null],[4,"ListInner","","For pattern match.",null,null],[13,"Nil","","",27,null],[13,"Cons","","",27,null],[8,"IntoCons","","A trait for making a cons cell in intuitive way.",null,null],[10,"cons","","",28,[[["l"]],["list"]]],[8,"IntoConsByMove","","",null,null],[10,"cons_move","","",29,[[["list"]],["list"]]],[11,"nil","","",30,[[],["list"]]],[11,"is_nil","","Whether the list is nil.",30,[[["self"]],["bool"]]],[11,"len","","Length of the list.",30,[[["self"]],["usize"]]],[11,"head","","Extract head of non-empty list.",30,[[["self"]],["t"]]],[11,"tail","","Extract tail of non-empty list.",30,[[["self"]],["list"]]],[11,"iter","","Gets an iterator without moving `self`.",30,[[["self"]],["listiter"]]],[11,"rev","","Get reversed list in O(n) time.",30,[[["self"]],["list"]]],[11,"append","","Concatenates two lists.",30,[[["list"],["self"]],["list"]]],[11,"rev_append","","Reverses `self`, then concatenates two lists.",30,[[["list"],["self"]],["list"]]],[0,"vec_union_find_sets","atcoder_snippets::collections","Disjoint-set data structure, known as union-find.",null,null],[3,"VecUnionFindSets","atcoder_snippets::collections::vec_union_find_sets","Disjoint-set data structure, known as union-find, for…",null,null],[11,"new","","Creates empty sets.",31,[[],["vecunionfindsets"]]],[11,"with_items","","Creates `count` singleton sets.",31,[[["usize"]],["vecunionfindsets"]]],[11,"add_items","","Adds `count` items labeled `n..n+count`, where `n` is how…",31,[[["self"],["usize"]]]],[11,"items_len","","Returns how many items are contained by all the sets.",31,[[["self"]],["usize"]]],[11,"count","","Returns how many sets `self` contains.",31,[[["self"]],["usize"]]],[11,"len_of","","Returns how many items `self` contains by the set which…",31,[[["self"],["usize"]],[["string"],["usize"],["result",["usize","string"]]]]],[11,"set_eq","","Returns if two sets containing `item1` and `item2` are the…",31,[[["self"],["usize"]],[["bool"],["string"],["result",["bool","string"]]]]],[11,"unite","","Merges two sets, set containing `item1` and set containing…",31,[[["self"],["usize"]],[["bool"],["string"],["result",["bool","string"]]]]],[11,"iter_cloned","","All sets as an iterator yielding `Vec<usize>`.",31,[[["self"]]]],[0,"hash_union_find_sets","atcoder_snippets::collections","Disjoint-set data structure, known as union-find.",null,null],[3,"HashUnionFindSets","atcoder_snippets::collections::hash_union_find_sets","Disjoint-set data structure, known as union-find, for…",null,null],[11,"new","","Creates an empty forest.",32,[[],["hashunionfindsets"]]],[11,"add","","Adds a singleton set composed of only `item`.",32,[[["self"],["t"]],["bool"]]],[11,"items_len","","Returns how many items are contained by all the sets.",32,[[["self"]],["usize"]]],[11,"count","","Returns how many sets `self` contains.",32,[[["self"]],["usize"]]],[11,"len_of","","Returns how many items `self` contains by the set which…",32,[[["t"],["self"]],[["string"],["usize"],["result",["usize","string"]]]]],[11,"set_eq","","Returns if two sets containing `item1` and `item2` are the…",32,[[["t"],["self"]],[["bool"],["string"],["result",["bool","string"]]]]],[11,"unite","","Merges two sets, set containing `item1` and set containing…",32,[[["self"],["t"]],[["bool"],["string"],["result",["bool","string"]]]]],[0,"hash_counter","atcoder_snippets::collections","Counter by a hash map from keys to counter values.",null,null],[3,"HashCounter","atcoder_snippets::collections::hash_counter","Counter by a hash map from keys to counter values.",null,null],[3,"HashCounterItemRef","","",null,null],[3,"HashCounterIter","","An iterator created by `iter` method on counters.",null,null],[3,"HashCounterIntoIter","","An iterator created by `into_iter` method on counters.",null,null],[3,"HashCounterValues","","An iterator created by `values` method on counters.",null,null],[11,"new","","Creates an empty counter.",33,[[],["hashcounter"]]],[11,"with_capacity","","Creates an empty counter with the specified capacity.",33,[[["usize"]],["hashcounter"]]],[11,"keys_len","","Gets how many keys the counter contains.",33,[[["self"]],["usize"]]],[11,"count","","Gets the counter value of `key`.",33,[[["self"],["q"]],["usize"]]],[11,"insert","","Increments the counter value for `key`.",33,[[["self"],["t"]]]],[11,"remove","","Decrements the counter value for `key`.",33,[[["self"],["q"]],["bool"]]],[11,"at","","Gets the mutable reference to the counter value of `key`.",33,[[["self"],["q"]],[["sized"],["hashcounteritemref"]]]],[11,"values","","Creates an iterator yielding how many items are contained…",33,[[["self"]],["hashcountervalues"]]],[11,"iter","","Creates an iterator yielding (&key, count) pairs.",33,[[["self"]],["hashcounteriter"]]],[0,"segment_tree","atcoder_snippets::collections","Segment tree.",null,null],[3,"SegmentTree","atcoder_snippets::collections::segment_tree","Seqence updateble by point and aggregatable by interval.",null,null],[3,"SegmentTreeItemRef","","",null,null],[8,"IteratorExtForSegmentTree","","",null,null],[11,"segment_tree","","",34,[[["f"]],["segmenttree"]]],[11,"new","","Create a new segment tree with `len` items.",35,[[["f"],["usize"],["t"]],["segmenttree"]]],[11,"from_vec","","Create a new segment tree from items in a vector.",35,[[["vec"],["t"],["f"]],["segmenttree"]]],[11,"len","","The number of items.",35,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the tree has no items.",35,[[["self"]],["bool"]]],[11,"items","","Gets all items as a slice.",35,[[["self"]]]],[11,"query","","Aggregate items in the range of `index`.",35,[[["rangebounds",["usize"]],["self"],["usize"]],["option"]]],[11,"get_mut","","Gets mutable reference to an item.",35,[[["self"],["usize"]],[["option",["segmenttreeitemref"]],["segmenttreeitemref"]]]],[11,"at","","Shorthand for `tree.get_mut(index).unwrap()`",35,[[["self"],["usize"]],["segmenttreeitemref"]]],[0,"heap","atcoder_snippets::collections","Priority queues implemented by binary heaps.",null,null],[3,"MaxHeap","atcoder_snippets::collections::heap","Priority queue yielding its maximum item.",null,null],[3,"MaxHeapIterator","","",null,null],[5,"max_heap","","Creates an empty maximum heap.",null,[[],[["maxheap"],["ord"]]]],[5,"max_heap_from_vec","","Creates a maximum heap of all items in `vec`.",null,[[["vec"],["ord"]],[["maxheap"],["ord"]]]],[5,"max_heap_by","","Creates an empty maximum heap using `cmp` for comparison.",null,[[["fn"]],[["fn"],["maxheap"]]]],[5,"max_heap_from_vec_by","","Creates a maximum heap of all items in `vec`, using `cmp`…",null,[[["fn"],["vec"]],[["fn"],["maxheap"]]]],[5,"max_heap_by_key","","Creates an empty maximum heap using `key` for comparison.",null,[[],["maxheap"]]],[5,"max_heap_from_vec_by_key","","Creates a maximum heap of all items in `vec`, using `key`…",null,[[["vec"]],["maxheap"]]],[5,"min_heap","","Creates an empty minimum heap.",null,[[],[["maxheap"],["ord"]]]],[5,"min_heap_from_vec","","Creates a minimum heap of all items in `vec`.",null,[[["vec"],["ord"]],[["maxheap"],["ord"]]]],[5,"min_heap_by","","Creates an empty minimum heap using `cmp` for comparison.",null,[[["fn"]],["maxheap"]]],[5,"min_heap_from_vec_by","","Creates a minimum heap of all items in `vec`, using `cmp`…",null,[[["fn"],["vec"]],["maxheap"]]],[5,"min_heap_by_key","","Creates an empty minimum heap using `key` for comparison.",null,[[],["maxheap"]]],[5,"min_heap_from_vec_by_key","","Creates a minimum heap of all items in `vec`, using `key`…",null,[[["vec"]],["maxheap"]]],[8,"PriorityQueue","","Priority queue trait.",null,null],[10,"len","","Returns how many items the queue contains.",36,[[["self"]],["usize"]]],[10,"is_empty","","Returns if the queue is empty.",36,[[["self"]],["bool"]]],[10,"push","","Pushes an item.",36,[[["self"],["t"]]]],[10,"pop","","Pops the most prioritized item.",36,[[["self"]],["option"]]],[10,"peek","","Gets the most prioritized item without removing it.",36,[[["self"]],[["t"],["option"]]]],[11,"as_slice","","Returns underlying `Vec` as a slice.",37,[[["self"]]]],[11,"into_vec","","Consumes the priority queue and returns the underlying…",37,[[],["vec"]]],[0,"bitset","atcoder_snippets::collections","Efficient boolean vector.",null,null],[3,"BitSet","atcoder_snippets::collections::bitset","Efficient boolean vector",null,null],[3,"BitSetRef","","",null,null],[3,"BitSetBits","","",null,null],[11,"new","","Creates a bitset of the specified bit length.",38,[[["usize"]],["bitset"]]],[11,"len","","Gets bit length.",38,[[["self"]],["usize"]]],[11,"get","","Gets `i`-th bit.",38,[[["self"],["usize"]],[["bool"],["option",["bool"]]]]],[11,"get_unchecked","","Gets `i`-th bit without bound checking.",38,[[["self"],["usize"]],["bool"]]],[11,"get_mut","","Gets `i`-th bit as a mutable boolean.",38,[[["self"],["usize"]],[["bitsetref"],["option",["bitsetref"]]]]],[11,"at","","Panicking `get_mut`.",38,[[["self"],["usize"]],["bitsetref"]]],[11,"count_ones","","Counts how many bits are sets.",38,[[["self"]],["u32"]]],[11,"bits","","Gets an iterator from the lowest bit to the highest,…",38,[[["self"]],["bitsetbits"]]],[0,"once_queue","atcoder_snippets::collections","Queue each item can be inserted only once.",null,null],[3,"HashOnceQueue","atcoder_snippets::collections::once_queue","Queue each item can be inserted only once.",null,null],[11,"new","","Craates an empty queue.",39,[[],["hashoncequeue"]]],[11,"push","","Enqueues a new item unless it has not been pushed before.",39,[[["self"],["t"]],["bool"]]],[11,"pop","","Dequeues the frontmost item if the queue is not empty.",39,[[["self"]],["option"]]],[11,"peek","","Gets a reference to the frontmost item if the queue is not…",39,[[["self"]],[["t"],["option"]]]],[11,"len","","",39,[[["self"]],["usize"]]],[11,"is_empty","","",39,[[["self"]],["bool"]]],[11,"pushed_items","","Set of all items that has been pushed before.",39,[[["self"]],["hashset"]]],[0,"modulo","atcoder_snippets","",null,null],[0,"modp","atcoder_snippets::modulo","Arithmetics modulo a prime number.",null,null],[3,"ModP","atcoder_snippets::modulo::modp","A number whose arithmetics is carried modulo a prime number.",null,null],[3,"FactCache","","",null,null],[3,"InvCache","","",null,null],[3,"PowCache","","",null,null],[3,"CombinatoricsCache","","",null,null],[5,"modp","","Shorthand of `ModP::new(x)`.",null,[[["modpbase"]],["modp"]]],[6,"ModPBase","","",null,null],[6,"ModPModulus","","",null,null],[11,"set_mod","","Sets the modulus.",40,[[["modpmodulus"]],[["result",["string"]],["string"]]]],[11,"new","","Create a number.",40,[[["modpbase"]],["modp"]]],[11,"new_unchecked","","Create a number without taking remainder by the modulus.",40,[[["modpbase"]],["modp"]]],[11,"base","","Returns a `ModPBase` satisfying `0 <= x < modulus`.",40,[[["self"]],["modpbase"]]],[11,"pow","","Calculate power using exponentiation by squaring.",40,[[["modpbase"]],["modp"]]],[11,"inv","","Inverse element.",40,[[],["modp"]]],[11,"fact_cache","","",40,[[],["factcache"]]],[11,"inv_cache","","",40,[[],["invcache"]]],[11,"pow_cache","","",40,[[["modpbase"]],["powcache"]]],[11,"combinatorics_cache","","Cache for faster calculation.",40,[[],["combinatoricscache"]]],[11,"get","","",41,[[["self"],["modpbase"]],["modp"]]],[11,"get","","",42,[[["self"],["modpbase"]],["modp"]]],[11,"get","","",43,[[["self"],["modpbase"]],["modp"]]],[11,"choose","","Binomial coefficient.",44,[[["self"],["modpbase"]],["modp"]]],[11,"permutation","","Number of permutations.",44,[[["self"],["modpbase"]],["modp"]]],[11,"multichoose","","Number of combinations with replacement.",44,[[["self"],["modpbase"]],["modp"]]],[11,"c","","Shorthand of `choose`",44,[[["self"],["modpbase"]],["modp"]]],[11,"p","","Shorthand of `permutaion`",44,[[["self"],["modpbase"]],["modp"]]],[11,"h","","Shorthand of `multichoose`",44,[[["self"],["modpbase"]],["modp"]]],[11,"fact","","",44,[[["self"],["modpbase"]],["modp"]]],[11,"inv","","",44,[[["self"],["modpbase"]],["modp"]]],[0,"vec","atcoder_snippets","2D and 3D geometric vectors.",null,null],[3,"Vec2","atcoder_snippets::vec","",null,null],[12,"x","","",45,null],[12,"y","","",45,null],[3,"Vec3","","",null,null],[12,"x","","",46,null],[12,"y","","",46,null],[12,"z","","",46,null],[11,"new","","",45,[[["t"]],["vec2"]]],[11,"inner","","Inner product of vectors.",45,[[["vec2"]],["t"]]],[11,"from_polar","","Creates a vector by polar notation.",45,[[["f64"]],[["vec2",["f64"]],["option",["vec2"]]]]],[11,"norm","","Euclid distance from the origin.",45,[[],["f64"]]],[11,"square_norm","","Square of norm.",45,[[],["f64"]]],[11,"new","","",46,[[["t"]],["vec3"]]],[11,"inner","","",46,[[["vec3"]],["t"]]],[0,"geometry","atcoder_snippets","2D Geometric calculations.",null,null],[3,"Circle","atcoder_snippets::geometry","",null,null],[17,"GEOMETRY_EPSILON","","",null,null],[11,"new","","Creates a circle from center and radius.",47,[[["vec2",["f64"]],["f64"]],[["circle"],["option",["circle"]]]]],[11,"new_unchecked","","Creates a circle without checking that radius is at least…",47,[[["vec2",["f64"]],["f64"]],["circle"]]],[11,"center","","Center of circle.",47,[[["self"]],[["vec2",["f64"]],["f64"]]]],[11,"radius","","Radius of circle.",47,[[["self"]],["f64"]]],[11,"from_3_points","","Gets the circle passing througth the given 3 points.",47,[[["vec2",["f64"]],["f64"]],[["circle"],["option",["circle"]]]]],[11,"smallest_enclosing","","Gets the smallest circle enclosing all the given points.",47,[[],[["circle"],["option",["circle"]]]]],[0,"table","atcoder_snippets","2-dimentional array.",null,null],[3,"Table","atcoder_snippets::table","2-dimentional array.",null,null],[3,"TableIndicesIterator","","",null,null],[3,"TableRows","","An iterator created by `Table::rows`.",null,null],[3,"CumulativeTable","","A table created by `Table::accumulate`.",null,null],[5,"backward2_indices","","",null,[[],["vec"]]],[5,"read_table","","",null,[[],["table"]]],[5,"read_table_rows","","",null,[[["usize"]],["table"]]],[5,"read_char_table","","",null,[[],[["table",["char"]],["char"]]]],[5,"read_char_table_rows","","",null,[[["usize"]],[["table",["char"]],["char"]]]],[8,"TableRangeBounds","","",null,null],[10,"y_bounds","","",48,[[["self"]]]],[10,"x_bounds","","",48,[[["self"]]]],[11,"from_rows","","Creates a new table from rows represented as `Vec<Vec<T>>`.",49,[[["vec",["vec"]],["vec"]],[["table"],["option",["table"]]]]],[11,"from_rows_unchecked","","Create a new table from rows without shape checking.",49,[[["vec",["vec"]],["vec"]],["table"]]],[11,"height","","Number of rows.",49,[[["self"]],["usize"]]],[11,"width","","Number of columns.",49,[[["self"]],["usize"]]],[11,"shape","","`(height, column)`.",49,[[["self"]]]],[11,"indices","","Creates an iterator yielding table indices as `(y, x)` in…",49,[[["self"]]]],[11,"inside","","Checks the index is in range.",49,[[["self"]],["bool"]]],[11,"row","","Row as a slice.",49,[[["self"],["usize"]],["option"]]],[11,"row_mut","","Row as a mutable slice.",49,[[["self"],["usize"]],["option"]]],[11,"get","","Gets the shared reference to an items at `(y, x)`.",49,[[["self"]],[["t"],["option"]]]],[11,"get_mut","","Gets the mutable reference to an items at `(y, x)`.",49,[[["self"]],[["option"],["t"]]]],[11,"rows","","",49,[[["self"]],["tablerows"]]],[11,"map","","Maps each element by `f` and gets a new table with the…",49,[[],["table"]]],[11,"ref_map","","Same as `map`, but takes `self` by reference instead by…",49,[[["self"]],["table"]]],[11,"transpose","","Transposes the table's row and column.",49,[[["self"]]]],[11,"adjacent4_indices","","Indices of vertically and horizontlly adjacent cells in…",49,[[["self"]],[["option",["vec"]],["vec"]]]],[11,"adjacent8_indices","","Indices of 8 enclosing cells in the dictionary order.",49,[[["self"]],[["option",["vec"]],["vec"]]]],[11,"accumulate","","Creates a cumulative table that can handle 2-dimentional…",49,[[["f2"],["f1"],["self"],["t"]],["cumulativetable"]]],[11,"query","","",50,[[["self"]],["option"]]],[11,"query_yx","","",50,[[["self"]],["option"]]],[0,"bsearch","atcoder_snippets","Generalized binary search.",null,null],[8,"BSearch","atcoder_snippets::bsearch","A sequence that binary search is applicable to.",null,null],[16,"Item","","Item type of the sequence.",51,null],[10,"is_empty","","Returns whether the sequence is empty.",51,[[["self"]],["bool"]]],[10,"leftmost_item","","Returns the last item in the sequence.",51,[[["self"]]]],[10,"rightmost_item","","Returns the first item in the sequence.",51,[[["self"]]]],[10,"middle_item","","Returns the middle item in the sequence.",51,[[["self"]]]],[10,"left_half","","Returns the left half of the sequence, including…",51,[[["self"]],["self"]]],[10,"right_half","","Returns the right half of the sequence, including…",51,[[["self"]],["self"]]],[10,"is_bsearch_converged","","Check convergence of halving process.",51,[[["self"]],["bool"]]],[11,"bsearch_left_max","","Returns the rightmost item satisfing `is_left`.",51,[[["self"],["f"]],["option"]]],[11,"bsearch_right_min","","Returns the minimum item satisfing `is_right`.",51,[[["self"],["f"]],["option"]]],[8,"SliceBSearch","","",null,null],[16,"Item","","",52,null],[10,"bsearch_left_max","","",52,[[["self"],["f"]],["option"]]],[10,"bsearch_index_left_max","","",52,[[["self"],["f"]],[["option",["usize"]],["usize"]]]],[10,"bsearch_right_min","","",52,[[["self"],["f"]],["option"]]],[10,"bsearch_index_right_min","","",52,[[["self"],["f"]],[["option",["usize"]],["usize"]]]],[0,"interval","atcoder_snippets","Intervals on a number line.",null,null],[3,"Interval","atcoder_snippets::interval","Interval including endpoints.",null,null],[3,"IntervalMerge","","Iterator created by `merge` method.",null,null],[8,"IntervalEndpoint","","Point on a number line.",null,null],[8,"IntervalIterator","","Iterator yielding intervals.",null,null],[11,"merge","","Creates an iterator yielding intervals, merging…",53,[[],["intervalmerge"]]],[11,"new","","Creates an interval.",54,[[["t"]],[["interval"],["option",["interval"]]]]],[11,"from_tuple","","",54,[[],[["interval"],["option",["interval"]]]]],[11,"left","","Gets the left endpoint.",54,[[["self"]],["t"]]],[11,"right","","Gets the right endpoint.",54,[[["self"]],["t"]]],[11,"endpoints","","Moves out both endpoints.",54,[[]]],[11,"contains","","Checks if the interals contains `point`.",54,[[["t"],["self"]],["bool"]]],[11,"length","","Length of the interval.",54,[[["self"]],["t"]]],[0,"z","atcoder_snippets","Exact string matching by Z algorithm.",null,null],[3,"LongestPrefixLengths","atcoder_snippets::z","An iterator generated by `longest_prefix_lengths`.",null,null],[3,"ZMatchIndices","","An iterator generated by `z_match_indices`.",null,null],[8,"ZString","","A string (sequence) equipped with methods for Z-array and…",null,null],[10,"longest_prefix_lengths","","Gets an iterator yielding Z-array's values.",55,[[["self"]],["longestprefixlengths"]]],[10,"z_match_indices","","Gets an iterator yielding `self`'s indices matching…",55,[[["self"]],[["option"],["zmatchindices",["option"]]]]],[0,"rolling_hash","atcoder_snippets","",null,null],[3,"RollingHashValue","atcoder_snippets::rolling_hash","A rolling hash of a sequence.",null,null],[3,"PrefixRollingHash","","Sliding rolling hashes of a sequence.",null,null],[3,"RollingHashMatches","","",null,null],[6,"RollingHashBase","","Unsigned integer type for rolling hash.",null,null],[8,"RollingHash","","A rolling-hashable sequence.",null,null],[10,"rolling_hash","","",56,[[["self"]],["rollinghashvalue"]]],[10,"prefix_rolling_hash","","",56,[[["self"]],["prefixrollinghash"]]],[11,"len","","Length of the original sequence.",57,[[["self"]],["usize"]]],[11,"value","","Rolling hash value.",57,[[["self"]],["rollinghashbase"]]],[11,"len","","Length of original sequence.",58,[[["self"]],["usize"]]],[11,"matches_at","","Checks if the subsequence starting from `index` matches…",58,[[["rollinghashvalue"],["self"],["usize"]],[["bool"],["option",["bool"]]]]],[11,"matches","","Returns an iterator yielding all indices matching `pattern`.",58,[[["rollinghashvalue"],["self"]],["rollinghashmatches"]]],[0,"xorshift","atcoder_snippets","Xorshift random number generator.",null,null],[3,"Xorshift","atcoder_snippets::xorshift","Random number generator by xorshift.",null,null],[8,"RngOutput","","",null,null],[10,"from_u64","","",59,[[["u64"]],["self"]]],[11,"new","","Random number generator seeded by system clock.",60,[[],["xorshift"]]],[11,"with_seed","","Random number generator with seed.",60,[[["u64"]],["xorshift"]]],[11,"next","","Gets a random number.",60,[[["self"]],["rngoutput"]]],[11,"shuffle","","Shuffles the slice.",60,[[["self"]]]],[0,"utils","atcoder_snippets","Utilities.",null,null],[5,"yn","atcoder_snippets::utils","Prints \"Yes\" or \"No\" according to `result`.",null,[[["bool"]]]],[5,"YN","","Prints \"YES\" or \"NO\" according to `result`.",null,[[["bool"]]]],[5,"exit","","Prints the given message with newline and exits the…",null,[[]]],[14,"readable","atcoder_snippets","Makes a type readable from stdin.",null,null],[14,"readable_collection","","Make collection type readable from input line.",null,null],[14,"read","","標準入力から一行を読み込み、結果を変数に代入する。",null,null],[14,"read_chunk","","Reads multiple lines from stdin and create let bindings.",null,null],[14,"chmin","","Assigns the given value if it is smaller than the current…",null,null],[14,"chmax","","Assigns the given value if it is greater than the current…",null,null],[14,"list","","Makes a list by enumerating its contents.",null,null],[14,"hash_counter","","",null,null],[14,"table","","Creates a table in a simlar way to `vec!` macro.",null,null],[14,"echo","","Output values by `println!(\"{} {} ... {}\", value_1,…",null,null],[14,"dbg","","Make a debug output of the given expression to stderr.",null,null],[11,"read_line","atcoder_snippets::read","",61,[[["str"]],[["result",["string"]],["string"]]]],[11,"guard","","",61,[[],["option"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"read_line","","",62,[[["str"]],[["result",["string"]],["string"]]]],[11,"guard","","",62,[[],["option"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"read_line","","",63,[[["str"]],[["result",["string"]],["string"]]]],[11,"guard","","",63,[[],["option"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"read_line","","",64,[[["str"]],[["result",["string"]],["string"]]]],[11,"guard","","",64,[[],["option"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"read_line","","",65,[[["str"]],[["result",["string"]],["string"]]]],[11,"guard","","",65,[[],["option"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"read_line","","",66,[[["str"]],[["result",["string"]],["string"]]]],[11,"guard","","",66,[[],["option"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[],["u"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"read_line","","",67,[[["str"]],[["result",["string"]],["string"]]]],[11,"guard","","",67,[[],["option"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"minmax","","",68,[[],["option"]]],[11,"minmax_by_key","","",68,[[["f"]],["option"]]],[11,"minmax_by","","",68,[[["f"]],["option"]]],[11,"guard","","",68,[[],["option"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[],["u"]]],[11,"into_iter","","",68,[[],["i"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"minmax","","",69,[[],["option"]]],[11,"minmax_by_key","","",69,[[["f"]],["option"]]],[11,"minmax_by","","",69,[[["f"]],["option"]]],[11,"guard","","",69,[[],["option"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[],["u"]]],[11,"into_iter","","",69,[[],["i"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"guard","atcoder_snippets::cmp","",10,[[],["option"]]],[11,"cons","","",10,[[["l"]],["list"]]],[11,"cons_move","","",10,[[["list"]],["list"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"guard","","",11,[[],["option"]]],[11,"cons","","",11,[[["l"]],["list"]]],[11,"cons_move","","",11,[[["list"]],["list"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"guard","","",12,[[],["option"]]],[11,"cons","","",12,[[["l"]],["list"]]],[11,"cons_move","","",12,[[["list"]],["list"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"guard","","",13,[[],["option"]]],[11,"cons","","",13,[[["l"]],["list"]]],[11,"cons_move","","",13,[[["list"]],["list"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"minmax","atcoder_snippets::iter","",70,[[],["option"]]],[11,"minmax_by_key","","",70,[[["f"]],["option"]]],[11,"minmax_by","","",70,[[["f"]],["option"]]],[11,"guard","","",70,[[],["option"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[],["u"]]],[11,"into_iter","","",70,[[],["i"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"minmax","","",71,[[],["option"]]],[11,"minmax_by_key","","",71,[[["f"]],["option"]]],[11,"minmax_by","","",71,[[["f"]],["option"]]],[11,"guard","","",71,[[],["option"]]],[11,"cons","","",71,[[["l"]],["list"]]],[11,"cons_move","","",71,[[["list"]],["list"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[],["u"]]],[11,"into_iter","","",71,[[],["i"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,[[["self"],["t"]]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"minmax","","",72,[[],["option"]]],[11,"minmax_by_key","","",72,[[["f"]],["option"]]],[11,"minmax_by","","",72,[[["f"]],["option"]]],[11,"guard","","",72,[[],["option"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[],["u"]]],[11,"into_iter","","",72,[[],["i"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"minmax","","",73,[[],["option"]]],[11,"minmax_by_key","","",73,[[["f"]],["option"]]],[11,"minmax_by","","",73,[[["f"]],["option"]]],[11,"guard","","",73,[[],["option"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[],["u"]]],[11,"into_iter","","",73,[[],["i"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"minmax","","",74,[[],["option"]]],[11,"minmax_by_key","","",74,[[["f"]],["option"]]],[11,"minmax_by","","",74,[[["f"]],["option"]]],[11,"guard","","",74,[[],["option"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[],["u"]]],[11,"into_iter","","",74,[[],["i"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"minmax","","",75,[[],["option"]]],[11,"minmax_by_key","","",75,[[["f"]],["option"]]],[11,"minmax_by","","",75,[[["f"]],["option"]]],[11,"guard","","",75,[[],["option"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[],["u"]]],[11,"into_iter","","",75,[[],["i"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"minmax","","",76,[[],["option"]]],[11,"minmax_by_key","","",76,[[["f"]],["option"]]],[11,"minmax_by","","",76,[[["f"]],["option"]]],[11,"guard","","",76,[[],["option"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[],["u"]]],[11,"into_iter","","",76,[[],["i"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"minmax","atcoder_snippets::slice","",77,[[],["option"]]],[11,"minmax_by_key","","",77,[[["f"]],["option"]]],[11,"minmax_by","","",77,[[["f"]],["option"]]],[11,"guard","","",77,[[],["option"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[],["u"]]],[11,"into_iter","","",77,[[],["i"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"minmax","","",78,[[],["option"]]],[11,"minmax_by_key","","",78,[[["f"]],["option"]]],[11,"minmax_by","","",78,[[["f"]],["option"]]],[11,"guard","","",78,[[],["option"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[],["u"]]],[11,"into_iter","","",78,[[],["i"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"minmax","","",79,[[],["option"]]],[11,"minmax_by_key","","",79,[[["f"]],["option"]]],[11,"minmax_by","","",79,[[["f"]],["option"]]],[11,"guard","","",79,[[],["option"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[],["u"]]],[11,"into_iter","","",79,[[],["i"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"guard","atcoder_snippets::collections::list","",30,[[],["option"]]],[11,"cons","","",30,[[["l"]],["list"]]],[11,"cons_move","","",30,[[["list"]],["list"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"into_iter","","",30,[[],["i"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"minmax","","",80,[[],["option"]]],[11,"minmax_by_key","","",80,[[["f"]],["option"]]],[11,"minmax_by","","",80,[[["f"]],["option"]]],[11,"guard","","",80,[[],["option"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[],["u"]]],[11,"into_iter","","",80,[[],["i"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"try_into","","",80,[[],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"type_id","","",80,[[["self"]],["typeid"]]],[11,"guard","","",27,[[],["option"]]],[11,"cons","","",27,[[["l"]],["list"]]],[11,"cons_move","","",27,[[["list"]],["list"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"guard","atcoder_snippets::collections::vec_union_find_sets","",31,[[],["option"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"guard","atcoder_snippets::collections::hash_union_find_sets","",32,[[],["option"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"read_line","atcoder_snippets::collections::hash_counter","",33,[[["str"]],[["result",["string"]],["string"]]]],[11,"guard","","",33,[[],["option"]]],[11,"cons","","",33,[[["l"]],["list"]]],[11,"cons_move","","",33,[[["list"]],["list"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"into_iter","","",33,[[],["i"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"guard","","",81,[[],["option"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[],["u"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"minmax","","",82,[[],["option"]]],[11,"minmax_by_key","","",82,[[["f"]],["option"]]],[11,"minmax_by","","",82,[[["f"]],["option"]]],[11,"guard","","",82,[[],["option"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[],["u"]]],[11,"into_iter","","",82,[[],["i"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"minmax","","",83,[[],["option"]]],[11,"minmax_by_key","","",83,[[["f"]],["option"]]],[11,"minmax_by","","",83,[[["f"]],["option"]]],[11,"guard","","",83,[[],["option"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[],["u"]]],[11,"into_iter","","",83,[[],["i"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"try_into","","",83,[[],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"type_id","","",83,[[["self"]],["typeid"]]],[11,"minmax","","",84,[[],["option"]]],[11,"minmax_by_key","","",84,[[["f"]],["option"]]],[11,"minmax_by","","",84,[[["f"]],["option"]]],[11,"guard","","",84,[[],["option"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[],["u"]]],[11,"into_iter","","",84,[[],["i"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"try_into","","",84,[[],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"type_id","","",84,[[["self"]],["typeid"]]],[11,"guard","atcoder_snippets::collections::segment_tree","",35,[[],["option"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"guard","","",85,[[],["option"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[],["u"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"guard","atcoder_snippets::collections::heap","",37,[[],["option"]]],[11,"cons","","",37,[[["l"]],["list"]]],[11,"cons_move","","",37,[[["list"]],["list"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"into_iter","","",37,[[],["i"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"minmax","","",86,[[],["option"]]],[11,"minmax_by_key","","",86,[[["f"]],["option"]]],[11,"minmax_by","","",86,[[["f"]],["option"]]],[11,"guard","","",86,[[],["option"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[],["u"]]],[11,"into_iter","","",86,[[],["i"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"try_into","","",86,[[],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"type_id","","",86,[[["self"]],["typeid"]]],[11,"guard","atcoder_snippets::collections::bitset","",38,[[],["option"]]],[11,"cons","","",38,[[["l"]],["list"]]],[11,"cons_move","","",38,[[["list"]],["list"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"guard","","",87,[[],["option"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[],["u"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"try_into","","",87,[[],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"type_id","","",87,[[["self"]],["typeid"]]],[11,"minmax","","",88,[[],["option"]]],[11,"minmax_by_key","","",88,[[["f"]],["option"]]],[11,"minmax_by","","",88,[[["f"]],["option"]]],[11,"guard","","",88,[[],["option"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[],["u"]]],[11,"into_iter","","",88,[[],["i"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"try_into","","",88,[[],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"type_id","","",88,[[["self"]],["typeid"]]],[11,"guard","atcoder_snippets::collections::once_queue","",39,[[],["option"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"read_line","atcoder_snippets::modulo::modp","",40,[[["str"]],[["result",["string"]],["string"]]]],[11,"guard","","",40,[[],["option"]]],[11,"cons","","",40,[[["l"]],["list"]]],[11,"cons_move","","",40,[[["list"]],["list"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"guard","","",41,[[],["option"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"guard","","",42,[[],["option"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"guard","","",43,[[],["option"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"guard","","",44,[[],["option"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"read_line","atcoder_snippets::vec","",45,[[["str"]],[["result",["string"]],["string"]]]],[11,"guard","","",45,[[],["option"]]],[11,"cons","","",45,[[["l"]],["list"]]],[11,"cons_move","","",45,[[["list"]],["list"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"to_string","","",45,[[["self"]],["string"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"read_line","","",46,[[["str"]],[["result",["string"]],["string"]]]],[11,"guard","","",46,[[],["option"]]],[11,"cons","","",46,[[["l"]],["list"]]],[11,"cons_move","","",46,[[["list"]],["list"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"to_string","","",46,[[["self"]],["string"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"guard","atcoder_snippets::geometry","",47,[[],["option"]]],[11,"cons","","",47,[[["l"]],["list"]]],[11,"cons_move","","",47,[[["list"]],["list"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"guard","atcoder_snippets::table","",49,[[],["option"]]],[11,"cons","","",49,[[["l"]],["list"]]],[11,"cons_move","","",49,[[["list"]],["list"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"to_string","","",49,[[["self"]],["string"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"minmax","","",89,[[],["option"]]],[11,"minmax_by_key","","",89,[[["f"]],["option"]]],[11,"minmax_by","","",89,[[["f"]],["option"]]],[11,"guard","","",89,[[],["option"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[],["u"]]],[11,"into_iter","","",89,[[],["i"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"try_into","","",89,[[],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"type_id","","",89,[[["self"]],["typeid"]]],[11,"minmax","","",90,[[],["option"]]],[11,"minmax_by_key","","",90,[[["f"]],["option"]]],[11,"minmax_by","","",90,[[["f"]],["option"]]],[11,"guard","","",90,[[],["option"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[],["u"]]],[11,"into_iter","","",90,[[],["i"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"try_into","","",90,[[],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"type_id","","",90,[[["self"]],["typeid"]]],[11,"guard","","",50,[[],["option"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"guard","atcoder_snippets::interval","",54,[[],["option"]]],[11,"cons","","",54,[[["l"]],["list"]]],[11,"cons_move","","",54,[[["list"]],["list"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,[[["self"],["t"]]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"guard","","",91,[[],["option"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[],["u"]]],[11,"into_iter","","",91,[[],["i"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"try_into","","",91,[[],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"type_id","","",91,[[["self"]],["typeid"]]],[11,"minmax","atcoder_snippets::z","",92,[[],["option"]]],[11,"minmax_by_key","","",92,[[["f"]],["option"]]],[11,"minmax_by","","",92,[[["f"]],["option"]]],[11,"guard","","",92,[[],["option"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[],["u"]]],[11,"into_iter","","",92,[[],["i"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"try_into","","",92,[[],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"type_id","","",92,[[["self"]],["typeid"]]],[11,"minmax","","",93,[[],["option"]]],[11,"minmax_by_key","","",93,[[["f"]],["option"]]],[11,"minmax_by","","",93,[[["f"]],["option"]]],[11,"guard","","",93,[[],["option"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[],["u"]]],[11,"into_iter","","",93,[[],["i"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"try_into","","",93,[[],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"type_id","","",93,[[["self"]],["typeid"]]],[11,"guard","atcoder_snippets::rolling_hash","",57,[[],["option"]]],[11,"cons","","",57,[[["l"]],["list"]]],[11,"cons_move","","",57,[[["list"]],["list"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,[[["self"],["t"]]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"guard","","",58,[[],["option"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"minmax","","",94,[[],["option"]]],[11,"minmax_by_key","","",94,[[["f"]],["option"]]],[11,"minmax_by","","",94,[[["f"]],["option"]]],[11,"guard","","",94,[[],["option"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[],["u"]]],[11,"into_iter","","",94,[[],["i"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"try_into","","",94,[[],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"type_id","","",94,[[["self"]],["typeid"]]],[11,"guard","atcoder_snippets::xorshift","",60,[[],["option"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"read_words","atcoder_snippets::read","",61,[[],[["result",["vec","string"]],["vec",["char"]],["string"]]]],[11,"read_words","","",62,[[],[["result",["vec","string"]],["vec",["u8"]],["string"]]]],[11,"read_words","","",63,[[],[["string"],["result",["string"]]]]],[11,"read_words","","",64,[[],[["string"],["result",["string"]]]]],[11,"read_words","","",65,[[],[["string"],["result",["string"]]]]],[11,"read_words","","",66,[[],[["string"],["result",["string"]]]]],[11,"read_words","","",67,[[],[["string"],["result",["string"]]]]],[11,"read_words","atcoder_snippets::modulo::modp","",40,[[],[["modp"],["string"],["result",["modp","string"]]]]],[11,"read_words","atcoder_snippets::vec","",45,[[],[["result",["vec2","string"]],["string"],["vec2"]]]],[11,"read_words","","",46,[[],[["string"],["vec3"],["result",["vec3","string"]]]]],[11,"read_line","atcoder_snippets::collections::hash_counter","",33,[[["str"]],[["result",["string"]],["string"]]]],[11,"new","atcoder_snippets::cmp","",12,[[["t"]],["maybeneginf"]]],[11,"inf","","",12,[[],["maybeneginf"]]],[11,"as_option","","",12,[[["self"]],[["t"],["option"]]]],[11,"as_option_mut","","",12,[[["self"]],[["option"],["t"]]]],[11,"into_option","","",12,[[],["option"]]],[11,"new","","",13,[[["t"]],["maybeinf"]]],[11,"inf","","",13,[[],["maybeinf"]]],[11,"as_option","","",13,[[["self"]],[["t"],["option"]]]],[11,"as_option_mut","","",13,[[["self"]],[["option"],["t"]]]],[11,"into_option","","",13,[[],["option"]]],[11,"len","atcoder_snippets::collections::heap","",37,[[["self"]],["usize"]]],[11,"is_empty","","",37,[[["self"]],["bool"]]],[11,"push","","",37,[[["self"],["t"]]]],[11,"pop","","",37,[[["self"]],["option"]]],[11,"peek","","",37,[[["self"]],[["t"],["option"]]]],[11,"drop","atcoder_snippets::collections::hash_counter","",81,[[["self"]]]],[11,"drop","atcoder_snippets::collections::segment_tree","",85,[[["self"]]]],[11,"drop","atcoder_snippets::collections::bitset","",87,[[["self"]]]],[11,"as_ref","atcoder_snippets::collections::list","",30,[[["self"]],["listinner"]]],[11,"from","atcoder_snippets::modulo::modp","",40,[[["i8"]],["modp"]]],[11,"from","","",40,[[["i16"]],["modp"]]],[11,"from","","",40,[[["i32"]],["modp"]]],[11,"from","","",40,[[["i64"]],["modp"]]],[11,"from","","",40,[[["isize"]],["modp"]]],[11,"from","","",40,[[["u8"]],["modp"]]],[11,"from","","",40,[[["u16"]],["modp"]]],[11,"from","","",40,[[["u32"]],["modp"]]],[11,"from","","",40,[[["u64"]],["modp"]]],[11,"from","","",40,[[["usize"]],["modp"]]],[11,"from","","",40,[[["i128"]],["modp"]]],[11,"from","","",40,[[["u128"]],["modp"]]],[11,"next_back","atcoder_snippets::collections::bitset","",88,[[["self"]],[["bool"],["option",["bool"]]]]],[11,"nth_back","","",88,[[["self"],["usize"]],[["bool"],["option",["bool"]]]]],[11,"extend","atcoder_snippets::collections::heap","",37,[[["self"],["intoiterator"]]]],[11,"into_iter","atcoder_snippets::collections::list","",30,[[],["listiter"]]],[11,"into_iter","atcoder_snippets::collections::hash_counter","",33,[[],["hashcounterintoiter"]]],[11,"into_iter","atcoder_snippets::collections::heap","Creates an iterator yielding all element in the order of…",37,[[],["maxheapiterator"]]],[11,"next","atcoder_snippets::read","",68,[[["self"]],["option"]]],[11,"next","","",69,[[["self"]],["option"]]],[11,"next","atcoder_snippets::iter","",70,[[["self"]],["option"]]],[11,"size_hint","","",70,[[["self"]]]],[11,"count","","",70,[[],["usize"]]],[11,"nth","","",70,[[["self"],["usize"]],["option"]]],[11,"next","","",71,[[["self"]],["option"]]],[11,"size_hint","","",71,[[["self"]]]],[11,"count","","",71,[[],["usize"]]],[11,"next","","",72,[[["self"]],["option"]]],[11,"size_hint","","",72,[[["self"]]]],[11,"next","","",73,[[["self"]],["option"]]],[11,"size_hint","","",73,[[["self"]]]],[11,"next","","",74,[[["self"]],["option"]]],[11,"next","","",75,[[["self"]],["option"]]],[11,"next","","",76,[[["self"]],["option"]]],[11,"next","atcoder_snippets::slice","",77,[[["self"]],["option"]]],[11,"next","","",78,[[["self"]],["option"]]],[11,"next","","",79,[[["self"]],[["vec"],["option",["vec"]]]]],[11,"next","atcoder_snippets::collections::list","",80,[[["self"]],["option"]]],[11,"size_hint","","",80,[[["self"]]]],[11,"count","","",80,[[],["usize"]]],[11,"next","atcoder_snippets::collections::hash_counter","",82,[[["self"]],["option"]]],[11,"next","","",83,[[["self"]],["option"]]],[11,"next","","",84,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"next","atcoder_snippets::collections::heap","",86,[[["self"]],["option"]]],[11,"size_hint","","",86,[[["self"]]]],[11,"count","","",86,[[],["usize"]]],[11,"next","atcoder_snippets::collections::bitset","",88,[[["self"]],[["bool"],["option",["bool"]]]]],[11,"size_hint","","",88,[[["self"]]]],[11,"count","","",88,[[],["usize"]]],[11,"last","","",88,[[],[["bool"],["option",["bool"]]]]],[11,"nth","","",88,[[["self"],["usize"]],[["bool"],["option",["bool"]]]]],[11,"next","atcoder_snippets::table","",89,[[["self"]],["option"]]],[11,"next","","",90,[[["self"]],["option"]]],[11,"next","atcoder_snippets::interval","",91,[[["self"]],[["interval"],["option",["interval"]]]]],[11,"next","atcoder_snippets::z","",92,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"next","","",93,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"next","atcoder_snippets::rolling_hash","",94,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"clone","atcoder_snippets::cmp","",10,[[["self"]],["reverse"]]],[11,"clone","","",11,[[["self"]],["total"]]],[11,"clone","","",12,[[["self"]],["maybeneginf"]]],[11,"clone","","",13,[[["self"]],["maybeinf"]]],[11,"clone","atcoder_snippets::iter","",71,[[["self"]],["lscan"]]],[11,"clone","atcoder_snippets::collections::list","",27,[[["self"]],["listinner"]]],[11,"clone","","",30,[[["self"]],["list"]]],[11,"clone","atcoder_snippets::collections::hash_counter","",33,[[["self"]],["hashcounter"]]],[11,"clone","atcoder_snippets::collections::heap","",37,[[["self"]],["maxheap"]]],[11,"clone","atcoder_snippets::collections::bitset","",38,[[["self"]],["bitset"]]],[11,"clone","atcoder_snippets::modulo::modp","",40,[[["self"]],["modp"]]],[11,"clone","atcoder_snippets::vec","",45,[[["self"]],["vec2"]]],[11,"clone","","",46,[[["self"]],["vec3"]]],[11,"clone","atcoder_snippets::geometry","",47,[[["self"]],["circle"]]],[11,"clone","atcoder_snippets::table","",49,[[["self"]],["table"]]],[11,"clone","atcoder_snippets::interval","",54,[[["self"]],["interval"]]],[11,"clone","atcoder_snippets::rolling_hash","",57,[[["self"]],["self"]]],[11,"default","atcoder_snippets::cmp","",10,[[],["reverse"]]],[11,"default","","",11,[[],["total"]]],[11,"cmp","","",10,[[["reverse"],["self"]],["ordering"]]],[11,"cmp","","",11,[[["self"]],["ordering"]]],[11,"cmp","","",12,[[["self"],["maybeneginf"]],["ordering"]]],[11,"cmp","","",13,[[["maybeinf"],["self"]],["ordering"]]],[11,"cmp","atcoder_snippets::collections::list","",30,[[["list"],["self"]],["ordering"]]],[11,"cmp","atcoder_snippets::vec","",45,[[["vec2"],["self"]],["ordering"]]],[11,"cmp","","",46,[[["self"],["vec3"]],["ordering"]]],[11,"eq","atcoder_snippets::cmp","",10,[[["reverse"],["self"]],["bool"]]],[11,"ne","","",10,[[["reverse"],["self"]],["bool"]]],[11,"eq","","",11,[[["total"],["self"]],["bool"]]],[11,"ne","","",11,[[["total"],["self"]],["bool"]]],[11,"eq","","",12,[[["self"],["maybeneginf"]],["bool"]]],[11,"ne","","",12,[[["self"],["maybeneginf"]],["bool"]]],[11,"eq","","",13,[[["maybeinf"],["self"]],["bool"]]],[11,"ne","","",13,[[["maybeinf"],["self"]],["bool"]]],[11,"eq","atcoder_snippets::collections::list","",27,[[["listinner"],["self"]],["bool"]]],[11,"ne","","",27,[[["listinner"],["self"]],["bool"]]],[11,"eq","","",30,[[["list"],["self"]],["bool"]]],[11,"ne","","",30,[[["list"],["self"]],["bool"]]],[11,"eq","atcoder_snippets::modulo::modp","",40,[[["modp"],["self"]],["bool"]]],[11,"ne","","",40,[[["modp"],["self"]],["bool"]]],[11,"eq","","",40,[[["self"],["modpbase"]],["bool"]]],[11,"eq","atcoder_snippets","",95,[[["modp"],["self"]],["bool"]]],[11,"eq","atcoder_snippets::vec","",45,[[["vec2"],["self"]],["bool"]]],[11,"ne","","",45,[[["vec2"],["self"]],["bool"]]],[11,"eq","","",46,[[["self"],["vec3"]],["bool"]]],[11,"ne","","",46,[[["self"],["vec3"]],["bool"]]],[11,"eq","atcoder_snippets::geometry","",47,[[["circle"],["self"]],["bool"]]],[11,"ne","","",47,[[["circle"],["self"]],["bool"]]],[11,"eq","atcoder_snippets::table","",49,[[["table"],["self"]],["bool"]]],[11,"ne","","",49,[[["table"],["self"]],["bool"]]],[11,"eq","atcoder_snippets::interval","",54,[[["interval"],["self"]],["bool"]]],[11,"ne","","",54,[[["interval"],["self"]],["bool"]]],[11,"partial_cmp","atcoder_snippets::cmp","",10,[[["reverse"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",11,[[["total"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",11,[[["total"],["self"]],["bool"]]],[11,"le","","",11,[[["total"],["self"]],["bool"]]],[11,"gt","","",11,[[["total"],["self"]],["bool"]]],[11,"ge","","",11,[[["total"],["self"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["maybeneginf"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",12,[[["self"],["maybeneginf"]],["bool"]]],[11,"le","","",12,[[["self"],["maybeneginf"]],["bool"]]],[11,"gt","","",12,[[["self"],["maybeneginf"]],["bool"]]],[11,"ge","","",12,[[["self"],["maybeneginf"]],["bool"]]],[11,"partial_cmp","","",13,[[["maybeinf"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",13,[[["maybeinf"],["self"]],["bool"]]],[11,"le","","",13,[[["maybeinf"],["self"]],["bool"]]],[11,"gt","","",13,[[["maybeinf"],["self"]],["bool"]]],[11,"ge","","",13,[[["maybeinf"],["self"]],["bool"]]],[11,"partial_cmp","atcoder_snippets::collections::list","",30,[[["list"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","atcoder_snippets::vec","",45,[[["vec2"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",45,[[["vec2"],["self"]],["bool"]]],[11,"le","","",45,[[["vec2"],["self"]],["bool"]]],[11,"gt","","",45,[[["vec2"],["self"]],["bool"]]],[11,"ge","","",45,[[["vec2"],["self"]],["bool"]]],[11,"partial_cmp","","",46,[[["self"],["vec3"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",46,[[["self"],["vec3"]],["bool"]]],[11,"le","","",46,[[["self"],["vec3"]],["bool"]]],[11,"gt","","",46,[[["self"],["vec3"]],["bool"]]],[11,"ge","","",46,[[["self"],["vec3"]],["bool"]]],[11,"deref","atcoder_snippets::collections::hash_counter","",81,[[["self"]],["usize"]]],[11,"deref","atcoder_snippets::collections::segment_tree","",85,[[["self"]],["t"]]],[11,"deref","atcoder_snippets::collections::bitset","",87,[[["self"]],["bool"]]],[11,"deref_mut","atcoder_snippets::collections::hash_counter","",81,[[["self"]],["usize"]]],[11,"deref_mut","atcoder_snippets::collections::segment_tree","",85,[[["self"]],["t"]]],[11,"deref_mut","atcoder_snippets::collections::bitset","",87,[[["self"]],["bool"]]],[11,"fmt","atcoder_snippets::cmp","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","atcoder_snippets::collections::list","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","atcoder_snippets::collections::vec_union_find_sets","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","atcoder_snippets::collections::hash_union_find_sets","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","atcoder_snippets::collections::hash_counter","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","atcoder_snippets::collections::heap","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","atcoder_snippets::collections::bitset","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","atcoder_snippets::modulo::modp","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","atcoder_snippets::vec","",45,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",46,[[["formatter"],["self"]],["result"]]],[11,"fmt","atcoder_snippets::geometry","",47,[[["formatter"],["self"]],["result"]]],[11,"fmt","atcoder_snippets::table","",49,[[["formatter"],["self"]],["result"]]],[11,"fmt","atcoder_snippets::interval","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","atcoder_snippets::modulo::modp","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","atcoder_snippets::vec","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","atcoder_snippets::table","Useful when you solve a problem to print whole the table,…",49,[[["self"],["formatter"]],["result"]]],[11,"div","atcoder_snippets::modulo::modp","",40,[[["modp"]],["modp"]]],[11,"div","","",40,[[["modpbase"]],["modp"]]],[11,"div","atcoder_snippets","",95,[[["modp"]],["modp"]]],[11,"div","atcoder_snippets::modulo::modp","",40,[[["modp"]]]],[11,"div","","",40,[[["modpbase"]]]],[11,"div","atcoder_snippets","",95,[[["modp"]]]],[11,"div","atcoder_snippets::vec","",45,[[["s"]]]],[11,"div","","",46,[[["s"]]]],[11,"sub","atcoder_snippets::modulo::modp","",40,[[["modp"]],["modp"]]],[11,"sub","","",40,[[["modpbase"]],["modp"]]],[11,"sub","atcoder_snippets","",95,[[["modp"]],["modp"]]],[11,"sub","atcoder_snippets::modulo::modp","",40,[[["modp"]]]],[11,"sub","","",40,[[["modpbase"]]]],[11,"sub","atcoder_snippets","",95,[[["modp"]]]],[11,"sub","atcoder_snippets::vec","",45,[[["vec2"]]]],[11,"sub","","",46,[[["vec3"]]]],[11,"add","atcoder_snippets::modulo::modp","",40,[[["modp"]],["modp"]]],[11,"add","","",40,[[["modpbase"]],["modp"]]],[11,"add","atcoder_snippets","",95,[[["modp"]],["modp"]]],[11,"add","atcoder_snippets::modulo::modp","",40,[[["modp"]]]],[11,"add","","",40,[[["modpbase"]]]],[11,"add","atcoder_snippets","",95,[[["modp"]]]],[11,"add","atcoder_snippets::vec","",45,[[["vec2"]]]],[11,"add","","",46,[[["vec3"]]]],[11,"mul","atcoder_snippets::modulo::modp","",40,[[["modp"]],["modp"]]],[11,"mul","","",40,[[["modpbase"]],["modp"]]],[11,"mul","atcoder_snippets","",95,[[["modp"]],["modp"]]],[11,"mul","atcoder_snippets::modulo::modp","",40,[[["modp"]]]],[11,"mul","","",40,[[["modpbase"]]]],[11,"mul","atcoder_snippets","",95,[[["modp"]]]],[11,"mul","atcoder_snippets::vec","",45,[[["s"]]]],[11,"mul","","",46,[[["s"]]]],[11,"neg","atcoder_snippets::modulo::modp","",40,[[],["modp"]]],[11,"neg","atcoder_snippets::vec","",45,[[]]],[11,"neg","","",46,[[]]],[11,"add_assign","atcoder_snippets::modulo::modp","",40,[[["self"],["modp"]]]],[11,"add_assign","","",40,[[["self"],["modpbase"]]]],[11,"add_assign","","",40,[[["modp"],["self"]]]],[11,"add_assign","","",40,[[["self"],["modpbase"]]]],[11,"add_assign","atcoder_snippets::vec","",45,[[["vec2"],["self"]]]],[11,"add_assign","","",46,[[["self"],["vec3"]]]],[11,"sub_assign","atcoder_snippets::modulo::modp","",40,[[["self"],["modp"]]]],[11,"sub_assign","","",40,[[["self"],["modpbase"]]]],[11,"sub_assign","","",40,[[["modp"],["self"]]]],[11,"sub_assign","","",40,[[["self"],["modpbase"]]]],[11,"sub_assign","atcoder_snippets::vec","",45,[[["vec2"],["self"]]]],[11,"sub_assign","","",46,[[["self"],["vec3"]]]],[11,"mul_assign","atcoder_snippets::modulo::modp","",40,[[["self"],["modp"]]]],[11,"mul_assign","","",40,[[["self"],["modpbase"]]]],[11,"mul_assign","","",40,[[["modp"],["self"]]]],[11,"mul_assign","","",40,[[["self"],["modpbase"]]]],[11,"mul_assign","atcoder_snippets::vec","",45,[[["self"],["s"]]]],[11,"mul_assign","","",46,[[["self"],["s"]]]],[11,"div_assign","atcoder_snippets::modulo::modp","",40,[[["self"],["modp"]]]],[11,"div_assign","","",40,[[["self"],["modpbase"]]]],[11,"div_assign","","",40,[[["modp"],["self"]]]],[11,"div_assign","","",40,[[["self"],["modpbase"]]]],[11,"div_assign","atcoder_snippets::vec","",45,[[["self"],["s"]]]],[11,"div_assign","","",46,[[["self"],["s"]]]],[11,"bitand","atcoder_snippets::collections::bitset","",38,[[["self"]],["self"]]],[11,"bitor","","",38,[[["self"]],["self"]]],[11,"bitxor","","",38,[[["self"]],["self"]]],[11,"shl","","",38,[[["usize"]],["self"]]],[11,"shr","","",38,[[["usize"]],["self"]]],[11,"bitand_assign","","",38,[[["self"],["self"]]]],[11,"bitor_assign","","",38,[[["self"],["self"]]]],[11,"bitxor_assign","","",38,[[["self"],["self"]]]],[11,"shl_assign","","",38,[[["self"],["usize"]]]],[11,"shr_assign","","",38,[[["self"],["usize"]]]],[11,"index","","",38,[[["self"],["usize"]],["bool"]]],[11,"index","atcoder_snippets::table","",49,[[["self"],["usize"]]]],[11,"index","","",49,[[["self"]],["t"]]],[11,"index_mut","","",49,[[["self"],["usize"]]]],[11,"index_mut","","",49,[[["self"]],["t"]]],[11,"hash","atcoder_snippets::cmp","",10,[[["self"],["__h"]]]],[11,"hash","","",11,[[["self"],["__h"]]]],[11,"hash","","",12,[[["self"],["__h"]]]],[11,"hash","","",13,[[["self"],["__h"]]]],[11,"hash","atcoder_snippets::modulo::modp","",40,[[["self"],["__h"]]]],[11,"hash","atcoder_snippets::vec","",45,[[["self"],["__h"]]]],[11,"hash","","",46,[[["self"],["__h"]]]],[11,"hash","atcoder_snippets::table","",49,[[["self"],["__h"]]]],[11,"hash","atcoder_snippets::interval","",54,[[["self"],["__h"]]]],[11,"from_iter","atcoder_snippets::collections::list","",30,[[["intoiterator"]],["list"]]],[11,"from_iter","atcoder_snippets::collections::hash_union_find_sets","Creates sets of singletons from an iterator.",32,[[["intoiterator"]],["hashunionfindsets"]]],[11,"from_iter","atcoder_snippets::collections::hash_counter","",33,[[["i"]],["hashcounter"]]],[11,"product","atcoder_snippets::modulo::modp","",40,[[["iterator"]],["modp"]]],[11,"product","","",40,[[["iterator"]],["modp"]]],[11,"sum","","",40,[[["iterator"]],["modp"]]],[11,"sum","","",40,[[["iterator"]],["modp"]]],[11,"to_signed_unchecked","atcoder_snippets::num","Converts to signed type without bound check.",6,[[["self"]]]],[11,"to_unsigned_unchecked","","Converts to unsigned type without bound check.",7,[[["self"]]]],[11,"gcd","","Greatest common divisor.",9,[[],["self"]]]],"p":[[8,"Readable"],[8,"ReadableFromLine"],[8,"ReadableFromChunk"],[8,"Words"],[8,"WithZero"],[8,"WithOne"],[8,"ToSigned"],[8,"ToUnsigned"],[8,"PrimitiveInteger"],[8,"PrimitiveUnsigned"],[3,"Reverse"],[3,"Total"],[4,"MaybeNegInf"],[4,"MaybeInf"],[8,"SortDesc"],[8,"IteratorMinmax"],[8,"WithCmpIdentity"],[8,"BoolExt"],[8,"OptionExt"],[8,"Guard"],[8,"UsizeRangeBoundsExt"],[8,"BoundCloned"],[8,"BoundExt"],[8,"IteratorExt"],[8,"IteratorInnerProduct"],[8,"SliceExt"],[8,"SliceOfVecsExt"],[4,"ListInner"],[8,"IntoCons"],[8,"IntoConsByMove"],[3,"List"],[3,"VecUnionFindSets"],[3,"HashUnionFindSets"],[3,"HashCounter"],[8,"IteratorExtForSegmentTree"],[3,"SegmentTree"],[8,"PriorityQueue"],[3,"MaxHeap"],[3,"BitSet"],[3,"HashOnceQueue"],[3,"ModP"],[3,"FactCache"],[3,"InvCache"],[3,"PowCache"],[3,"CombinatoricsCache"],[3,"Vec2"],[3,"Vec3"],[3,"Circle"],[8,"TableRangeBounds"],[3,"Table"],[3,"CumulativeTable"],[8,"BSearch"],[8,"SliceBSearch"],[8,"IntervalIterator"],[3,"Interval"],[8,"ZString"],[8,"RollingHash"],[3,"RollingHashValue"],[3,"PrefixRollingHash"],[8,"RngOutput"],[3,"Xorshift"],[3,"Chars"],[3,"Bytes"],[3,"u8_"],[3,"u16_"],[3,"u32_"],[3,"u64_"],[3,"usize_"],[3,"ReadLines"],[3,"ReadChunks"],[3,"Chunks"],[3,"LScan"],[3,"GroupBy"],[3,"RunLength"],[3,"Unfold"],[3,"Iterate"],[3,"IterateMap"],[3,"SliceGroupBy"],[3,"SplitByGap"],[3,"Permutations"],[3,"ListIter"],[3,"HashCounterItemRef"],[3,"HashCounterIter"],[3,"HashCounterIntoIter"],[3,"HashCounterValues"],[3,"SegmentTreeItemRef"],[3,"MaxHeapIterator"],[3,"BitSetRef"],[3,"BitSetBits"],[3,"TableIndicesIterator"],[3,"TableRows"],[3,"IntervalMerge"],[3,"LongestPrefixLengths"],[3,"ZMatchIndices"],[3,"RollingHashMatches"],[6,"ModPBase"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);